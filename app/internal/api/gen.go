// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Counter defines model for Counter.
type Counter struct {
	// Counter The incremented counter value
	Counter int `json:"counter"`

	// Zone Zone data from Redis
	Zone string `json:"zone"`
}

// DeleteCounterResponse defines model for DeleteCounterResponse.
type DeleteCounterResponse = Counter

// Error standard error
type Error struct {
	// Detail Details about the error.
	Detail *string `json:"detail,omitempty"`

	// Instance The portal traceback code
	Instance string `json:"instance"`

	// InvalidParameters TODO
	InvalidParameters *[]InvalidParameters `json:"invalid_parameters,omitempty"`

	// Status The HTTP status code.
	Status int `json:"status"`

	// Title The error response code.
	Title string `json:"title"`

	// Type The error type.
	Type *string `json:"type,omitempty"`
}

// GetCounterResponse defines model for GetCounterResponse.
type GetCounterResponse = Counter

// InvalidParameters defines model for InvalidParameters.
type InvalidParameters struct {
	Choices *[]string `json:"choices,omitempty"`
	Field   *string   `json:"field,omitempty"`
	Reason  *string   `json:"reason,omitempty"`
	Rule    *string   `json:"rule,omitempty"`
}

// PostCounterResponse defines model for PostCounterResponse.
type PostCounterResponse = Counter

// VersionResponse defines model for VersionResponse.
type VersionResponse struct {
	// Color Application color in HEX format
	Color string `json:"color"`

	// Version Application version
	Version string `json:"version"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Reset the counter
	// (DELETE /counter)
	DeleteCounter(w http.ResponseWriter, r *http.Request)
	// Get the current counter value
	// (GET /counter)
	GetCounter(w http.ResponseWriter, r *http.Request)
	// Increment the counter
	// (POST /counter)
	PostCounter(w http.ResponseWriter, r *http.Request)
	// Get the application version and color
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteCounter operation middleware
func (siw *ServerInterfaceWrapper) DeleteCounter(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCounter(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCounter operation middleware
func (siw *ServerInterfaceWrapper) GetCounter(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCounter(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCounter operation middleware
func (siw *ServerInterfaceWrapper) PostCounter(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCounter(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/counter", wrapper.DeleteCounter).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/counter", wrapper.GetCounter).Methods("GET")

	r.HandleFunc(options.BaseURL+"/counter", wrapper.PostCounter).Methods("POST")

	r.HandleFunc(options.BaseURL+"/version", wrapper.GetVersion).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+Vwhuj4olO81a6C1rstbAsBppUAwrguEsnW02EqmRJ7dpof99IKkftsU4",
	"GbAAecgbJR7Ju+/7jh9/8EyVlZIoyfD0BzfZBktww7eqloTaDiutKtQk0E1kw0SOJtOiIqEkT/n1BpmQ",
	"mcYSJWHO2kC2haJGHnG6q5CnXEjCNWreRPy7kjje5y8lkeVAwFZalewKc2GG5Ya0kGveNBHX+E8tNOY8",
	"/dxn1W5608er5RfMiEf82wl+g7IqfBWXfjzdq2h22uXEa3PyFQ3xxh50gQUStohcoamUNPiCTBPxS61V",
	"oGBDIHPQOUM3Hx0AlSOBKMbLLtx/w2CpamK0Qb9+wiPeZtiCaetDY6EkhJJ9BcOkIrZStczHgERcSJtR",
	"hmFqKqUJCkYaMlxCdssylePemT4idRHpbPbm9ezN2Sx5/cvp2XR2mkyn4TO3UIj87wo0lEioTeD0Dxcf",
	"eMQFYelmf9a44in/KR7aMm57Mp77/RbDdk1/KmgNd/bbEFBtwmW+v75eMB/gKtyD9VXyKqRDElTcg5qj",
	"hum2G8Y78j8Usd/uY8T/uH9fO//o7Q4U34LQZb9D/01fUavcRzYDm+7K9kCCucpq29gjGQ6qe4yAOuo8",
	"E22WgaI3RJVJ4/hWyTVUYiLkSsW3dQknbbee5FiqWCo68Ym4Rn2H9HJ/je+vcVONUdkokflh36f3yHno",
	"w5XAIg9GagRjwQhN1b7Xxnh0cmjTZTv5HsLRRHyhzAvZAbI/oTZCyWOYFCE3O6+qQmRgv5gLYUKy95d/",
	"spXSJVDoetv6o47v1QU9BMoQ5xMcoWIXGMxqLejuo7ULX86vCBr1eU2b/m1nFy3d7/0LxQNkr5KQIIRh",
	"54s5q7TaihwNs5i5EoyFgJUgYS3kmkEvFpA500ha4NZOfO+0MOGDmN/uxDqxnC/mfAc6Pp0kk8SiqSqU",
	"UAme8tNJMjm17wmgjasx3tOxfaaFnhX2v3EPii7BQZO7uaLZT7UvdJ73+7ztJdp5n0tkliReQpJQkh3C",
	"QHX8pe15b+YPWX34veko2q/sY51laMyqLqwRIzG12q3SYnf2P+blPTOQxzlbQs5WIIpao5djXZag73jK",
	"r1xiB1mtkcY8XfUkuOhaa+uq7t45KMxxdoSpwe2ekqaApz7EkSsQisNy/N36HNh613HVoj/KsFImQN28",
	"MwzPnW+swGXQcnuEuh3zekruQh55nLzeE59jk/X472fWRDzesaJHdB2M/cnx533PIJGQaxPsuE+9TT0Z",
	"a4cO/h/abVyMdTvr33bdc2q9oxT4TQ3qrXusfj5k83eVQcFy3GKhKicIH8sjXuuidfs0jgsbt1GG0rMk",
	"SWLrrs1N828AAAD//8AWYmcQEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
